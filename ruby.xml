<?xml version='1.0' encoding='utf-8'?>
<snippets language="ruby">
  <snippet>
    <tag>all</tag>
    <description>all? { |e| .. }</description>
    <text><![CDATA[all? { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>am</tag>
    <description>alias_method ...</description>
    <text><![CDATA[alias_method :${1:new_name}, :${2:old_name}]]></text>
  </snippet>
  <snippet>
    <tag>any</tag>
    <description>any? { |e| .. }</description>
    <text><![CDATA[any? { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>app</tag>
    <description>application_code { .. }</description>
    <text><![CDATA[if __FILE__ == $$PROGRAM_NAME
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>Array</tag>
    <description>Array.new(10) { |i| .. }</description>
    <text><![CDATA[Array.new(${1:10}) { |${2:i}|${0} }]]></text>
  </snippet>
  <snippet>
    <tag>art</tag>
    <description>assert_redirected_to</description>
    <text><![CDATA[assert_redirected_to :action => "${1:index}"]]></text>
  </snippet>
  <snippet>
    <tag>as</tag>
    <description>assert(..)</description>
    <text><![CDATA[assert(${1:test}, "${2:message}")]]></text>
  </snippet>
  <snippet>
    <tag>ase</tag>
    <description>assert_equal(..)</description>
    <text><![CDATA[assert_equal(${1:expected}, ${2:actual})]]></text>
  </snippet>
  <snippet>
    <tag>asid</tag>
    <description>assert_in_delta(..)</description>
    <text><![CDATA[assert_in_delta(${1:expected_float}, ${2:actual_float}, ${3:20})]]></text>
  </snippet>
  <snippet>
    <tag>asio</tag>
    <description>assert_instance_of(..)</description>
    <text><![CDATA[assert_instance_of(${1:ExpectedClass}, ${2:actual_instance})]]></text>
  </snippet>
  <snippet>
    <tag>asko</tag>
    <description>assert_kind_of(..)</description>
    <text><![CDATA[assert_kind_of(${1:ExpectedKind}, ${2:actual_instance})]]></text>
  </snippet>
  <snippet>
    <tag>asm</tag>
    <description>assert_match(..)</description>
    <text><![CDATA[assert_match(/${1:expected_pattern}/, ${2:actual_string})]]></text>
  </snippet>
  <snippet>
    <tag>asn</tag>
    <description>assert_nil(..)</description>
    <text><![CDATA[assert_nil(${1:instance})]]></text>
  </snippet>
  <snippet>
    <tag>asne</tag>
    <description>assert_not_equal(..)</description>
    <text><![CDATA[assert_not_equal(${1:unexpected}, ${2:actual})]]></text>
  </snippet>
  <snippet>
    <tag>asnm</tag>
    <description>assert_no_match(..)</description>
    <text><![CDATA[assert_no_match(/${1:unexpected_pattern}/, ${2:actual_string})]]></text>
  </snippet>
  <snippet>
    <tag>asnn</tag>
    <description>assert_not_nil(..)</description>
    <text><![CDATA[assert_not_nil(${1:instance})]]></text>
  </snippet>
  <snippet>
    <tag>asnr</tag>
    <description>assert_nothing_raised(..) { .. }</description>
    <text><![CDATA[assert_nothing_raised(${1:Exception}) { ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>asns</tag>
    <description>assert_not_same(..)</description>
    <text><![CDATA[assert_not_same(${1:unexpected}, ${2:actual})]]></text>
  </snippet>
  <snippet>
    <tag>asnt</tag>
    <description>assert_nothing_thrown { .. }</description>
    <text><![CDATA[assert_nothing_thrown { ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>aso</tag>
    <description>assert_operator(..)</description>
    <text><![CDATA[assert_operator(${1:left}, :${2:operator}, ${3:right})]]></text>
  </snippet>
  <snippet>
    <tag>asr</tag>
    <description>assert_raise(..) { .. }</description>
    <text><![CDATA[assert_raise(${1:Exception}) { ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>asre</tag>
    <description>assert_response</description>
    <text><![CDATA[assert_response :${1:success}]]></text>
  </snippet>
  <snippet>
    <tag>asrt</tag>
    <description>assert_respond_to(..)</description>
    <text><![CDATA[assert_respond_to(${1:object}, :${2:method})]]></text>
  </snippet>
  <snippet>
    <tag>ass</tag>
    <description>assert_same(..)</description>
    <text><![CDATA[assert_same(${1:expected}, ${2:actual})]]></text>
  </snippet>
  <snippet>
    <tag>ass</tag>
    <description>assert_send(..)</description>
    <text><![CDATA[assert_send([${1:object}, :${2:message}, ${3:args}])]]></text>
  </snippet>
  <snippet>
    <tag>ast</tag>
    <description>assert_throws(..) { .. }</description>
    <text><![CDATA[assert_throws(:${1:expected}) { ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>b</tag>
    <description>New Block</description>
    <text><![CDATA[=begin rdoc
	${0}
=end]]></text>
  </snippet>
  <snippet>
    <tag>bm</tag>
    <description>Benchmark.bmbm(..) do .. end</description>
    <text><![CDATA[TESTS = ${1:10_000}
Benchmark.bmbm(${2:10}) do |results|
  ${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>bt</tag>
    <description>belongs_to</description>
    <text><![CDATA[belongs_to :${1:object}]]></text>
  </snippet>
  <snippet>
    <tag>cl</tag>
    <description>classify { |e| .. }</description>
    <text><![CDATA[classify { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>cla</tag>
    <description>class .. &lt; DelegateClass .. initialize .. end</description>
    <text><![CDATA[class ${1:ClassName} < DelegateClass(${2:ParentClass})
	def initialize${1}
		super(${3:del_obj})
		
		${0}
	end
	
	
end]]></text>
  </snippet>
  <snippet>
    <tag>cla</tag>
    <description>class .. &lt; ParentClass .. initialize .. end</description>
    <text><![CDATA[class ${1:ClassName} < ${2:ParentClass}
	def initialize${1}
		${0}
	end
	
	
end]]></text>
  </snippet>
  <snippet>
    <tag>cla</tag>
    <description>class .. &lt; Struct .. initialize .. end</description>
    <text><![CDATA[class ${1:ClassName} < Struct.new(:${2:attr_names})
	def initialize(*args)
		super
		
		${0}
	end
	
	
end]]></text>
  </snippet>
  <snippet>
    <tag>cla</tag>
    <description>class .. initialize .. end</description>
    <text><![CDATA[class ${1:ClassName}
	def initialize${1}
		${0}
	end
	
	
end]]></text>
  </snippet>
  <snippet>
    <tag>cla</tag>
    <description>class &lt;&lt; self .. end</description>
    <text><![CDATA[class << ${1:self}
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>cla</tag>
    <description>class BlankSlate .. initialize .. end</description>
    <text><![CDATA[class ${1:BlankSlate}
	instance_methods.each { |meth| undef_method(meth) unless meth =~ /\A__/ }
	
	def initialize${1}
		@${3:delegate} = ${delegate_object}
		
		${0}
	end
	
	def method_missing(meth, *args, &block)
		@${3}.send(meth, *args, &block)
	end
	
	
end]]></text>
  </snippet>
  <snippet>
    <tag>clafn</tag>
    <description>class_from_name()</description>
    <text><![CDATA[split("::").inject(Object) { |par, const| par.const_get(const) }]]></text>
  </snippet>
  <snippet>
    <tag>col</tag>
    <description>collect { |e| .. }</description>
    <text><![CDATA[collect { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>Comp</tag>
    <description>include Comparable ..</description>
    <text><![CDATA[include Comparable

def <=>(other)
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>dee</tag>
    <description>deep_copy(..)</description>
    <text><![CDATA[Marshal.load(Marshal.dump(${1:obj_to_copy}))]]></text>
  </snippet>
  <snippet>
    <tag>defd</tag>
    <description>def_delegator ..</description>
    <text><![CDATA[def_delegator :${1:del_obj}, :${2:del_meth}, :${3:new_name}]]></text>
  </snippet>
  <snippet>
    <tag>defds</tag>
    <description>def_delegators ..</description>
    <text><![CDATA[def_delegators :${1:del_obj}, :${2:del_methods}]]></text>
  </snippet>
  <snippet>
    <tag>defs</tag>
    <description>def self .. end</description>
    <text><![CDATA[def self.${1:class_method_name}
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>deft</tag>
    <description>def test_ .. end</description>
    <text><![CDATA[def test_${1:case_name}
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>deli</tag>
    <description>delete_if { |e| .. }</description>
    <text><![CDATA[delete_if { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>det</tag>
    <description>detect { |e| .. }</description>
    <text><![CDATA[detect { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>Dir</tag>
    <description>Dir.glob("..") { |file| .. }</description>
    <text><![CDATA[Dir.glob(${1:glob}) { |${2:file}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>doo</tag>
    <description>Insert do |object| â€¦ end</description>
    <text><![CDATA[do |${1:object}|
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>dow</tag>
    <description>downto(0) { |n| .. }</description>
    <text><![CDATA[downto(${1}) { |${2:n}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>ea</tag>
    <description>each { |e| .. }</description>
    <text><![CDATA[each { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eab</tag>
    <description>each_byte { |byte| .. }</description>
    <text><![CDATA[each_byte { |${1:byte}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eac</tag>
    <description>each_char { |chr| .. }</description>
    <text><![CDATA[each_char { |${1:chr}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eac</tag>
    <description>each_cons(..) { |group| .. }</description>
    <text><![CDATA[each_cons(${1:2}) { |${2:group}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>each</tag>
    <description>each element</description>
    <text><![CDATA[each { |${1:element}| ${1}.${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eachwithindex</tag>
    <description>each_with_index</description>
    <text><![CDATA[each_with_index { |${1:element}, ${2:idx}| ${1}.${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eai</tag>
    <description>each_index { |i| .. }</description>
    <text><![CDATA[each_index { |${1:i}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eal</tag>
    <description>each_line { |line| .. }</description>
    <text><![CDATA[each_line${1:1} { |${2:line}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eap</tag>
    <description>each_pair { |name, val| .. }</description>
    <text><![CDATA[each_pair { |${1:name}, ${2:val}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eas</tag>
    <description>each_slice(..) { |group| .. }</description>
    <text><![CDATA[each_slice(${1:2}) { |${2:group}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eav</tag>
    <description>each_value { |val| .. }</description>
    <text><![CDATA[each_value { |${1:val}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>eawi</tag>
    <description>each_with_index { |e, i| .. }</description>
    <text><![CDATA[each_with_index { |${1:e}, ${2:i}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>elsif</tag>
    <description>elsif ...</description>
    <text><![CDATA[elsif ${1:condition}
	${0}]]></text>
  </snippet>
  <snippet>
    <tag>EmbeddedCode</tag>
    <description>Embedded Code â€” #{â€¦}</description>
    <text><![CDATA[#{${1:paste}}]]></text>
  </snippet>
  <snippet>
    <tag>Enum</tag>
    <description>include Enumerable ..</description>
    <text><![CDATA[include Enumerable

def each(&block)
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>fet</tag>
    <description>fetch(name) { |key| .. }</description>
    <text><![CDATA[fetch(${1:name}) { |${2:key}|${0} }]]></text>
  </snippet>
  <snippet>
    <tag>fil</tag>
    <description>fill(range) { |i| .. }</description>
    <text><![CDATA[fill(${1:range}) { |${2:i}|${0} }]]></text>
  </snippet>
  <snippet>
    <tag>File</tag>
    <description>File.foreach ("..") { |line| .. }</description>
    <text><![CDATA[File.foreach(${1:file}) { |${2:line}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>fin</tag>
    <description>find { |e| .. }</description>
    <text><![CDATA[find { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>fina</tag>
    <description>find_all { |e| .. }</description>
    <text><![CDATA[find_all { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>fl</tag>
    <description>flunk(..)</description>
    <text><![CDATA[flunk("${1:message}")]]></text>
  </snippet>
  <snippet>
    <tag>flao</tag>
    <description>flatten_once()</description>
    <text><![CDATA[inject(Array.new) { |${1:arr}, ${2:a}| ${1}.push(*${a}) }]]></text>
  </snippet>
  <snippet>
    <tag>flash</tag>
    <description>flash[â€¦]</description>
    <text><![CDATA[flash[:${1:notice}] = "${2:Successfully}"${0}]]></text>
  </snippet>
  <snippet>
    <tag>forin</tag>
    <description>for â€¦ in â€¦ end</description>
    <text><![CDATA[for ${1:element} in ${2:collection}
	${1}.${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>Forw</tag>
    <description>extend Forwardable</description>
    <text><![CDATA[extend Forwardable]]></text>
  </snippet>
  <snippet>
    <tag>gre</tag>
    <description>grep(/pattern/) { |match| .. }</description>
    <text><![CDATA[grep(${1:pattern}) { |${2:match}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>gsu</tag>
    <description>gsub(/../) { |match| .. }</description>
    <text><![CDATA[gsub(/${1:pattern}/) { |${2:match}|${0} }]]></text>
  </snippet>
  <snippet>
    <tag>habtm</tag>
    <description>has_and_belongs_to_many</description>
    <text><![CDATA[has_and_belongs_to_many :${1:object}]]></text>
  </snippet>
  <snippet>
    <tag>Hash</tag>
    <description>Hash.new { |hash, key| hash[key] = .. }</description>
    <text><![CDATA[Hash.new { |${1:hash}, ${2:key}| ${1}[${2}] = ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>HashPointer</tag>
    <description>Hash Pointer â€” =&gt;</description>
    <text><![CDATA[ => ]]></text>
  </snippet>
  <snippet>
    <tag>hm</tag>
    <description>has_many</description>
    <text><![CDATA[has_many :${1:objects}]]></text>
  </snippet>
  <snippet>
    <tag>ho</tag>
    <description>has_one</description>
    <text><![CDATA[has_one :${1:object}]]></text>
  </snippet>
  <snippet>
    <tag>inj</tag>
    <description>inject(init) { |mem, var| .. }</description>
    <text><![CDATA[inject(${1:init}) { |${2:mem}, ${3:var}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>inject</tag>
    <description>inject object</description>
    <text><![CDATA[inject(${1:object}) { |${2:injection}, ${3:element}| ${4} }${0}]]></text>
  </snippet>
  <snippet>
    <tag>lam</tag>
    <description>lambda { |args| .. }</description>
    <text><![CDATA[lambda { |${1:args}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>log</tag>
    <description>logger.debug</description>
    <text><![CDATA[logger.debug "${1:message}"${0}]]></text>
  </snippet>
  <snippet>
    <tag>log</tag>
    <description>logger.error</description>
    <text><![CDATA[logger.error "${1:message}"${0}]]></text>
  </snippet>
  <snippet>
    <tag>log</tag>
    <description>logger.fatal</description>
    <text><![CDATA[logger.fatal "${1:message}"${0}]]></text>
  </snippet>
  <snippet>
    <tag>log</tag>
    <description>logger.info</description>
    <text><![CDATA[logger.info "${1:message}"${0}]]></text>
  </snippet>
  <snippet>
    <tag>log</tag>
    <description>logger.warn</description>
    <text><![CDATA[logger.warn "${1:message}"${0}]]></text>
  </snippet>
  <snippet>
    <tag>map</tag>
    <description>map { |e| .. }</description>
    <text><![CDATA[map { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>mapwi</tag>
    <description>map_with_index { |e, i| .. }</description>
    <text><![CDATA[enum_with_index.map { |${1:e}, ${2:i}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>max</tag>
    <description>max { |a, b| .. }</description>
    <text><![CDATA[max { |a, b| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>mccc</tag>
    <description>Create Several Columns</description>
    <text><![CDATA[t.column :${1:title}, :${2:string}
mccc${0}]]></text>
  </snippet>
  <snippet>
    <tag>mcol</tag>
    <description>Add Column</description>
    <text><![CDATA[add_column :${1:table}, :${2:column}, :${3:string}]]></text>
  </snippet>
  <snippet>
    <tag>mcol</tag>
    <description>Create Column in Table</description>
    <text><![CDATA[t.column :${1:title}, :${2:string} ${0}]]></text>
  </snippet>
  <snippet>
    <tag>mcol</tag>
    <description>Remove Column</description>
    <text><![CDATA[remove_column :${1:table}, :${2:column}]]></text>
  </snippet>
  <snippet>
    <tag>mcol</tag>
    <description>Rename Column</description>
    <text><![CDATA[rename_column :${1:column}, :${2:new_column}]]></text>
  </snippet>
  <snippet>
    <tag>Md</tag>
    <description>Marshal.dump(.., file)</description>
    <text><![CDATA[File.open(${1:dump}, "w") { |${2:file}| Marshal.dump(${3:obj}, ${2}) }]]></text>
  </snippet>
  <snippet>
    <tag>min</tag>
    <description>min { |a, b| .. }</description>
    <text><![CDATA[min { |a, b| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>Ml</tag>
    <description>Marshal.load(obj)</description>
    <text><![CDATA[File.open(${1:dump}) { |${2:file}| Marshal.load(${2}) }]]></text>
  </snippet>
  <snippet>
    <tag>mm</tag>
    <description>def method_missing .. end</description>
    <text><![CDATA[def method_missing(meth, *args, &block)
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>mod</tag>
    <description>module .. ClassMethods .. end</description>
    <text><![CDATA[module ${1:ModuleName}
	module ClassMethods
		${0}
	end
	
	extend ClassMethods
	
	def self.included(receiver)
		receiver.extend(ClassMethods)
	end
	
	
end]]></text>
  </snippet>
  <snippet>
    <tag>mod</tag>
    <description>module .. end</description>
    <text><![CDATA[module ${1:ModuleName}
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>mod</tag>
    <description>module .. module_function .. end</description>
    <text><![CDATA[module ${1:ModuleName}
	module_function
	
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>mtab</tag>
    <description>Create Table</description>
    <text><![CDATA[create_table :${1:table} do |t|
    ${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>mtab</tag>
    <description>Drop / Create Table</description>
    <text><![CDATA[drop_table :${1:table}]]></text>
  </snippet>
  <snippet>
    <tag>mtab</tag>
    <description>Drop Table</description>
    <text><![CDATA[drop_table :${1:table}
${0}]]></text>
  </snippet>
  <snippet>
    <tag>mtab</tag>
    <description>Rename Table</description>
    <text><![CDATA[rename_table :${1:table}, :${2:new_name}${0}]]></text>
  </snippet>
  <snippet>
    <tag>ope</tag>
    <description>open("path/or/url", "w") { |io| .. }</description>
    <text><![CDATA[open(${1:pipe}) { |${2:io}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>opt</tag>
    <description>option(..)</description>
    <text><![CDATA[opts.on( "-${1:o}", "--${2:option}"${1},
         "${3:description}" ) do |${opt}|
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>optp</tag>
    <description>option_parse { .. }</description>
    <text><![CDATA[require "optparse"
require "ostruct"

options = OpenStruct.new(${1:default})

ARGV.options do |opts|
	opts.banner = "Usage:  #{File.basename($$PROGRAM_NAME)}  [OPTIONS]${1}"
	
	opts.separator ""
	opts.separator "Specific Options:"
	
	${0}
	
	opts.separator "Common Options:"
	
	opts.on( "-h", "--help",
	         "Show this message." ) do
		puts opts
		exit
	end
	
	begin
		opts.parse!
	rescue
		puts opts
		exit
	end
end
]]></text>
  </snippet>
  <snippet>
    <tag>par</tag>
    <description>partition { |e| .. }</description>
    <text><![CDATA[partition { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>p</tag>
    <description>params[â€¦]</description>
    <text><![CDATA[params[:${1:id}]]]></text>
  </snippet>
  <snippet>
    <tag>patfh</tag>
    <description>path_from_here( .. )</description>
    <text><![CDATA[File.join(File.dirname(__FILE__), *%w[${1:here}])]]></text>
  </snippet>
  <snippet>
    <tag>Pn</tag>
    <description>PStore.new( .. )</description>
    <text><![CDATA[PStore.new(${1:file_name})]]></text>
  </snippet>
  <snippet>
    <tag>r</tag>
    <description>attr_reader ..</description>
    <text><![CDATA[attr_reader :${1:attr_names}]]></text>
  </snippet>
  <snippet>
    <tag>ra</tag>
    <description>render (action)</description>
    <text><![CDATA[render :action => "${1:action}"]]></text>
  </snippet>
  <snippet>
    <tag>ral</tag>
    <description>render (action, layout)</description>
    <text><![CDATA[render :action => "${1:action}", :layout => "${2:layoutname}"]]></text>
  </snippet>
  <snippet>
    <tag>ran</tag>
    <description>randomize()</description>
    <text><![CDATA[sort_by { rand }]]></text>
  </snippet>
  <snippet>
    <tag>rb</tag>
    <description>#!/usr/local/bin/ruby -w"</description>
    <text><![CDATA[#!/usr/bin/env ruby -w

]]></text>
  </snippet>
  <snippet>
    <tag>rcea</tag>
    <description>render_component (action)</description>
    <text><![CDATA[render_component :action => "${1:index}"]]></text>
  </snippet>
  <snippet>
    <tag>rcec</tag>
    <description>render_component (controller)</description>
    <text><![CDATA[render_component :controller => "${1:items}"]]></text>
  </snippet>
  <snippet>
    <tag>rceca</tag>
    <description>render_component (controller, action)</description>
    <text><![CDATA[render_component :controller => "${1:items}", :action => "${2:index}"]]></text>
  </snippet>
  <snippet>
    <tag>rdb</tag>
    <description>RAILS_DEFAULT_LOGGER.debug</description>
    <text><![CDATA[RAILS_DEFAULT_LOGGER.debug "${1:message}"${0}]]></text>
  </snippet>
  <snippet>
    <tag>rea</tag>
    <description>redirect_to (action)</description>
    <text><![CDATA[redirect_to :action => "${1:index}"]]></text>
  </snippet>
  <snippet>
    <tag>reai</tag>
    <description>redirect_to (action, id)</description>
    <text><![CDATA[redirect_to :action => "${1:show}", :id => ${2:item}]]></text>
  </snippet>
  <snippet>
    <tag>rec</tag>
    <description>redirect_to (controller)</description>
    <text><![CDATA[redirect_to :controller => "${1:items}"]]></text>
  </snippet>
  <snippet>
    <tag>reca</tag>
    <description>redirect_to (controller, action)</description>
    <text><![CDATA[redirect_to :controller => "${1:items}", :action => "${2:list}"]]></text>
  </snippet>
  <snippet>
    <tag>recai</tag>
    <description>redirect_to (controller, action, id)</description>
    <text><![CDATA[redirect_to :controller => "${1:items}", :action => "${2:show}", :id => ${3:item}]]></text>
  </snippet>
  <snippet>
    <tag>rej</tag>
    <description>reject { |e| .. }</description>
    <text><![CDATA[reject { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>reject</tag>
    <description>reject element</description>
    <text><![CDATA[reject { |${1:element}| ${2:element}.${0} }]]></text>
  </snippet>
  <snippet>
    <tag>rep</tag>
    <description>results.report(..) { .. }</description>
    <text><![CDATA[results.report("${1:name}:") { TESTS.times { ${0} } }]]></text>
  </snippet>
  <snippet>
    <tag>req</tag>
    <description>require ".."</description>
    <text><![CDATA[require "${0}"]]></text>
  </snippet>
  <snippet>
    <tag>reve</tag>
    <description>reverse_each { |e| .. }</description>
    <text><![CDATA[reverse_each { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>rf</tag>
    <description>render (file)</description>
    <text><![CDATA[render :file => "${1:filepath}"]]></text>
  </snippet>
  <snippet>
    <tag>rfu</tag>
    <description>render (file, use_full_path)</description>
    <text><![CDATA[render :file => "${1:filepath}", :use_full_path => ${2:false}]]></text>
  </snippet>
  <snippet>
    <tag>ri</tag>
    <description>render (inline)</description>
    <text><![CDATA[render :inline => "${1:hello}"]]></text>
  </snippet>
  <snippet>
    <tag>ril</tag>
    <description>render (inline, locals)</description>
    <text><![CDATA[render :inline => "${1:hello}", :locals => { ${2:name} => "${3:value}"${4} }]]></text>
  </snippet>
  <snippet>
    <tag>rit</tag>
    <description>render (inline, type)</description>
    <text><![CDATA[render :inline => "${1:hello}", :type => ${2:rxml}]]></text>
  </snippet>
  <snippet>
    <tag>rl</tag>
    <description>render (layout)</description>
    <text><![CDATA[render :layout => "${1:layoutname}"]]></text>
  </snippet>
  <snippet>
    <tag>rn</tag>
    <description>render (nothing)</description>
    <text><![CDATA[render :nothing => ${true}]]></text>
  </snippet>
  <snippet>
    <tag>rns</tag>
    <description>render (nothing, status)</description>
    <text><![CDATA[render :nothing => ${1:true}, :status => ${2:401}]]></text>
  </snippet>
  <snippet>
    <tag>rp</tag>
    <description>render (partial)</description>
    <text><![CDATA[render :partial => "${1:item}"]]></text>
  </snippet>
  <snippet>
    <tag>rpc</tag>
    <description>render (partial, collection)</description>
    <text><![CDATA[render :partial => "${1:item}", :collection => ${2:items}]]></text>
  </snippet>
  <snippet>
    <tag>rpl</tag>
    <description>render (partial, locals)</description>
    <text><![CDATA[render :partial => "${1:item}", :locals => { :${2:name} => "${3:value}"${4} }]]></text>
  </snippet>
  <snippet>
    <tag>rpo</tag>
    <description>render (partial, object)</description>
    <text><![CDATA[render :partial => "${1:item}", :object => ${2:object}]]></text>
  </snippet>
  <snippet>
    <tag>rps</tag>
    <description>render (partial, status)</description>
    <text><![CDATA[render :partial => "${1:item}", :status => ${2:500}]]></text>
  </snippet>
  <snippet>
    <tag>rt</tag>
    <description>render (text)</description>
    <text><![CDATA[render :text => "${1:render}"]]></text>
  </snippet>
  <snippet>
    <tag>rtl</tag>
    <description>render (text, layout)</description>
    <text><![CDATA[render :text => "${1:render}", :layout => "${2:layoutname}"]]></text>
  </snippet>
  <snippet>
    <tag>rtlt</tag>
    <description>render (text, layout =&gt; true)</description>
    <text><![CDATA[render :text => "${1:render}", :layout => ${2:true}]]></text>
  </snippet>
  <snippet>
    <tag>rts</tag>
    <description>render (text, status)</description>
    <text><![CDATA[render :text => "${1:render}", :status => ${2:401}]]></text>
  </snippet>
  <snippet>
    <tag>rw</tag>
    <description>attr_accessor ..</description>
    <text><![CDATA[attr_accessor :${1:attr_names}]]></text>
  </snippet>
  <snippet>
    <tag>sca</tag>
    <description>scan(/../) { |match| .. }</description>
    <text><![CDATA[scan(/${1:pattern}/) { |${2:match}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>sel</tag>
    <description>select { |e| .. }</description>
    <text><![CDATA[select { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>select</tag>
    <description>select element</description>
    <text><![CDATA[select { |${1:element}| ${1}.${2} }${0}]]></text>
  </snippet>
  <snippet>
    <tag>session</tag>
    <description>session[â€¦]</description>
    <text><![CDATA[session[:${1:User}]]]></text>
  </snippet>
  <snippet>
    <tag>sin</tag>
    <description>singleton_class()</description>
    <text><![CDATA[class << self; self end]]></text>
  </snippet>
  <snippet>
    <tag>sor</tag>
    <description>sort { |a, b| .. }</description>
    <text><![CDATA[sort { |a, b| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>sorb</tag>
    <description>sort_by { |e| .. }</description>
    <text><![CDATA[sort_by { |${1:e}| ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>ste</tag>
    <description>step(2) { |e| .. }</description>
    <text><![CDATA[step(${1:2}) { |${2:n}|${0} }]]></text>
  </snippet>
  <snippet>
    <tag>sub</tag>
    <description>sub(/../) { |match| .. }</description>
    <text><![CDATA[sub(/${1:pattern}/) { |${2:match}|${0} }]]></text>
  </snippet>
  <snippet>
    <tag>tc</tag>
    <description>class .. &lt; Test::Unit::TestCase .. end</description>
    <text><![CDATA[require "test/unit"

require "${library_file_name}"

class Test${1:amp} < Test::Unit::TestCase
	def test_${2:case_name}
		${0}
	end
end]]></text>
  </snippet>
  <snippet>
    <tag>tim</tag>
    <description>times { |n| .. }</description>
    <text><![CDATA[times { |${1:n}|${0} }]]></text>
  </snippet>
  <snippet>
    <tag>tra</tag>
    <description>transaction( .. ) { .. }</description>
    <text><![CDATA[transaction${1} { ${0} }]]></text>
  </snippet>
  <snippet>
    <tag>ts</tag>
    <description>require "tc_.." ..</description>
    <text><![CDATA[require "test/unit"

require "tc_${1:test_case_file}"
require "tc_${2:test_case_file}"
]]></text>
  </snippet>
  <snippet>
    <tag>uni</tag>
    <description>unix_filter { .. }</description>
    <text><![CDATA[ARGF.each_line${1} do |${2:line}|
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>unless</tag>
    <description>unless â€¦ end</description>
    <text><![CDATA[unless ${1:condition}
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>until</tag>
    <description>until ... end</description>
    <text><![CDATA[until ${1:condition}
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>upt</tag>
    <description>upto(1.0/0.0) { |n| .. }"</description>
    <text><![CDATA[upto(${1}) { |${2:n}|${0} }]]></text>
  </snippet>
  <snippet>
    <tag>usai</tag>
    <description>usage_if()</description>
    <text><![CDATA[if ARGV.${1}
  puts "Usage:  #{$$PROGRAM_NAME} ${ARGS_GO_HERE}"
  exit
end]]></text>
  </snippet>
  <snippet>
    <tag>usau</tag>
    <description>usage_unless()</description>
    <text><![CDATA[unless ARGV.${1}
  puts "Usage:  #{$$PROGRAM_NAME} ${ARGS_GO_HERE}"
  exit
end]]></text>
  </snippet>
  <snippet>
    <tag>va</tag>
    <description>validates_associated</description>
    <text><![CDATA[validates_associated :${1:attribute}]]></text>
  </snippet>
  <snippet>
    <tag>vc</tag>
    <description>validates_confirmation_of</description>
    <text><![CDATA[validates_confirmation_of :${1:attribute}]]></text>
  </snippet>
  <snippet>
    <tag>ve</tag>
    <description>validates_exclusion_of</description>
    <text><![CDATA[validates_exclusion_of :${1:attribute}]]></text>
  </snippet>
  <snippet>
    <tag>verify</tag>
    <description>verify â€” redirect</description>
    <text><![CDATA[verify :only => [:${1}], :session => :user, :params => :id, :redirect_to => {:action => '${2:index}'}
]]></text>
  </snippet>
  <snippet>
    <tag>verify</tag>
    <description>verify â€” render</description>
    <text><![CDATA[verify :only => [:${1}], :method => :post, :render => {:status => 500, :text => "use HTTP-POST"}
]]></text>
  </snippet>
  <snippet>
    <tag>vl</tag>
    <description>validates_length_of</description>
    <text><![CDATA[validates_length_of :${1:attribute}, :within => ${2:20}]]></text>
  </snippet>
  <snippet>
    <tag>vp</tag>
    <description>validates_presence_of</description>
    <text><![CDATA[validates_presence_of :${1:attribute}]]></text>
  </snippet>
  <snippet>
    <tag>vpif</tag>
    <description>validates_presence_of if</description>
    <text><![CDATA[validates_presence_of :${1:attribute}, :if => proc { |obj| ${2:condition} }}]]></text>
  </snippet>
  <snippet>
    <tag>vu</tag>
    <description>validates_uniqueness_of</description>
    <text><![CDATA[validates_uniqueness_of :${1:attribute}]]></text>
  </snippet>
  <snippet>
    <tag>w</tag>
    <description>attr_writer ..</description>
    <text><![CDATA[attr_writer :${1:attr_names}]]></text>
  </snippet>
  <snippet>
    <tag>when</tag>
    <description>when â€¦</description>
    <text><![CDATA[when ${1:condition}
	${0}]]></text>
  </snippet>
  <snippet>
    <tag>while</tag>
    <description>while ... end</description>
    <text><![CDATA[while ${1:condition}
	${0}
end]]></text>
  </snippet>
  <snippet>
    <tag>y</tag>
    <description>:yields:</description>
    <text><![CDATA[ :yields: ${1:arguments}]]></text>
  </snippet>
  <snippet>
    <tag>Yd</tag>
    <description>YAML.dump(.., file)</description>
    <text><![CDATA[File.open(${1:yaml}, "w") { |${2:file}| YAML.dump(${3:obj}, ${2}) }]]></text>
  </snippet>
  <snippet>
    <tag>Yl</tag>
    <description>YAML.load(file)</description>
    <text><![CDATA[File.open(${1:yaml}) { |${2}| YAML.load(${2}) }]]></text>
  </snippet>
  <snippet>
    <tag>zip</tag>
    <description>zip(enums) { |row| .. }</description>
    <text><![CDATA[zip(${1:enums}) { |${2:row}| ${0} }]]></text>
  </snippet>
  <snippet>
    <text><![CDATA[:action => '$0']]></text>
    <tag>act</tag>
    <description>:action</description>
  </snippet>
  <snippet>
    <text><![CDATA[validates_numericality_of :${1:price}, :${2:only_integer} => ${3:true}]]></text>
    <tag>vn</tag>
    <description>validates_numericality_of</description>
  </snippet>
  <snippet>
    <text><![CDATA[validates_format_of :${1:image_url},
                    :${2:with}    => $3%r{\.(gif|jpg|png)$}i,
                    :${4:message} => "${5:must be a URL for a GIF, JPG, or PNG image}" $0

]]></text>
    <tag>vf</tag>
    <description>validates_format_of</description>
  </snippet>
  <snippet>
    <text><![CDATA[before_filter :${1:action} $0]]></text>
    <tag>bf</tag>
    <description>before_filter :action</description>
  </snippet>
  <snippet>
    <text><![CDATA[before_filter :${1:authorize}, :except => :${2:login} $0]]></text>
    <tag>bfe</tag>
    <description>before_filter :action, :except =&gt; :action</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].insert_html :${2:bottom}, '${3:text}' $0]]></text>
    <tag>insert</tag>
    <description>page.insert_html :bottom, 'dom_id', 'text'</description>
  </snippet>
  <snippet>
    <text><![CDATA[page.insert_html :${1:bottom}, ${2:dom_id}
								 							 :partial => '${3:partial}',
															 :object => @${4:object} $0]]></text>
    <tag>insert</tag>
    <description>page.insert_html :bottom, 'dom_id', :partial =&gt; 'partial', :object =&gt; @object</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].replace_html '${2:text}' $0]]></text>
    <tag>replace</tag>
    <description>page.replace_html 'dom_id', "text</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].replace_html :partial => '${2:partial}', :object => @${3:object} $0]]></text>
    <tag>replace</tag>
    <description>page.replace_html 'dom_id, :partial =&gt; 'partial', :object =&gt; @object</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].remove $0]]></text>
    <tag>remove</tag>
    <description>page.remove 'dom_id'</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].hide $0]]></text>
    <tag>hide</tag>
    <description>page.hide 'dom_id'</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].show $0]]></text>
    <tag>show</tag>
    <description>page.show 'dom_id</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:some-element}].toggle $0]]></text>
    <tag>tog</tag>
    <description>page.toggle 'dom_id'</description>
  </snippet>
  <snippet>
    <text><![CDATA[page.alert '${1:Hello world}' $0]]></text>
    <tag>alert</tag>
    <description>page.alert 'message'</description>
  </snippet>
  <snippet>
    <text><![CDATA[page.redirect_to :controller => '${1:controller}', :action => '${2:action}', :id => @${3:object} $0]]></text>
    <tag>redirect</tag>
    <description>page.redirect_to :controller =&gt; 'controller', :action =&gt; 'action', :id =&gt; @object</description>
  </snippet>
  <snippet>
    <text><![CDATA[page.call ${1:function}, ${2:param1}, ${3:param2} $0]]></text>
    <tag>call</tag>
    <description>page.call function, param1, param2</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].assign ${2:value} $0]]></text>
    <tag>assign</tag>
    <description>page.assign "dom_id", value</description>
  </snippet>
  <snippet>
    <text><![CDATA[page << "${1:alert('hello world);}"]]></text>
    <tag>raw</tag>
    <description>page &lt;&lt; "alert('hello world);</description>
  </snippet>
  <snippet>
    <text><![CDATA[page.delay(${1:5}) do
	$0
end]]></text>
    <tag>delay</tag>
    <description>page.delay(time)</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].visual_effect :${2:highlight} $0]]></text>
    <tag>visual</tag>
    <description>page.visual_effect :effect, 'dom_id'</description>
  </snippet>
  <snippet>
    <text><![CDATA[page[:${1:dom_id}].visual_effect :${2:highlight}, :duration => ${3:2} $0]]></text>
    <tag>visual</tag>
    <description>page.visual_effect :effect, 'dom_id', :duration =&gt; 2</description>
  </snippet>
  <snippet>
    <text><![CDATA[page.sortable '${1:my_list}', :url => { :action => '${2:order}' } $0]]></text>
    <tag>sort</tag>
    <description>page.sortable 'my_list', :url =&gt; { :action =&gt; 'order' }</description>
  </snippet>
  <snippet>
    <text><![CDATA[page.dragable '${1:my_image}', :revert => ${2:true} $0]]></text>
    <tag>drag</tag>
    <description>page.dragable 'my_image', :revert =&gt; true</description>
  </snippet>
  <snippet>
    <text><![CDATA[page.drop_recieving '${1:my_cart}', :url => { :controller => '${2:cart}', :action => '${3:add}' } $0]]></text>
    <tag>drop</tag>
    <description>page.drop_recieving 'my_cart', :url =&gt; { :controller =&gt; 'cart', :action =&gt; 'add' }</description>
  </snippet>
  <snippet override="ruby-:">
    <text><![CDATA[:${1:key} => $0]]></text>
    <tag>kv</tag>
    <description>hash pair</description>
  </snippet>
  <snippet>
    <text><![CDATA[redirect_to ${1:path}]]></text>
    <tag>rd</tag>
    <description>Redirect To Path</description>
  </snippet>
  <snippet>
    <text><![CDATA[it "deveria ${1:test}" do
	$0
end]]></text>
    <tag>it</tag>
    <description>Rspec It</description>
  </snippet>
  <snippet>
    <text><![CDATA[describe "${1:description}" do
	$0
end]]></text>
    <tag>desc</tag>
    <description>Rspec describe</description>
  </snippet>
</snippets>
